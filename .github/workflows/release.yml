name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'
      - 'Cargo.toml'
      - 'Cargo.lock'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install cargo-conventional-commits
        run: cargo install cargo-conventional-commits
      
      - name: Check if release is needed
        id: check
        run: |
          NEXT_VERSION=$(cargo conventional-commits --version-from-cargo-toml --unreleased-version)
          CURRENT_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          
          if [ "$NEXT_VERSION" != "$CURRENT_VERSION" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-release
    if: ${{ needs.check-release.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install cargo-release
        run: cargo install cargo-release
      
      - name: Generate CHANGELOG
        run: |
          cargo install cargo-conventional-commits
          cargo conventional-commits --update-changelog
      
      - name: Prepare release
        run: |
          VERSION=${{ needs.check-release.outputs.next_version }}
          echo "Processing release for version $VERSION"
          
          # Determine version bump level
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            if [[ $(git log --format=%B -n 500 | grep -c "BREAKING CHANGE:") -gt 0 ]]; then
              LEVEL="major"
            elif [[ $(git log --format=%B -n 500 | grep -c "^feat") -gt 0 ]]; then
              LEVEL="minor"
            else
              LEVEL="patch"
            fi
            
            echo "Releasing $LEVEL version: $VERSION"
            cargo release $LEVEL --no-dev-version --no-confirm --execute
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-release.outputs.next_version }}
          name: Release v${{ needs.check-release.outputs.next_version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 