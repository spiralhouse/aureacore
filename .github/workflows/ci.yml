name: CI

on:
  push:
    branches: [ main ]
    paths:
      - '**.rs'
      - '**.toml'
      - 'Cargo.lock'
      - '.github/workflows/ci.yml'
      - 'deny.toml'
      - 'codecov.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.rs'
      - '**.toml'
      - 'Cargo.lock'
      - '.github/workflows/ci.yml'
      - 'deny.toml'
      - 'codecov.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features
        env:
          REDIS_URL: redis://localhost:6379

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Check dependencies
        run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install nightly --component llvm-tools-preview
          rustup override set nightly
          rustup show

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage

      - name: Install grcov
        run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.18/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tests with coverage
        run: |
          cargo clean
          CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' cargo test --verbose
        env:
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage reports
        run: |
          # Generate unit test coverage
          grcov . --binary-path ./target/debug/deps/ -s ./src -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o unit-coverage.lcov
          
          # Generate integration test coverage
          grcov . --binary-path ./target/debug/deps/ -s ./tests -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o integration-coverage.lcov
          
          # Generate combined coverage for backwards compatibility
          grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.lcov,unit-coverage.lcov,integration-coverage.lcov
          flags: unit,integration
          fail_ci_if_error: true
          verbose: true 